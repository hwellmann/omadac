/*
 *    Omadac - The Open Map Database Compiler
 *    http://omadac.org
 * 
 *    (C) 2010, Harald Wellmann and Contributors
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation;
 *    version 2.1 of the License.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 */
/**
 * 
 */
package org.omadac.nom;

import java.util.HashSet;
import java.util.Set;

public class NomJunction
{
    private long id;
    private int x;
    private int y;
    private Integer z;
    private int zLevel;
    private Set<NomLink> links;
    
    public NomJunction()
    {
        links = new HashSet<NomLink>();
    }
    
    public NomJunction(long id, int x, int y)
    {
        this.id = id;
        this.x = x;
        this.y = y;
    }
    
    public long getId()
    {
        return id;
    }
    public void setId(long id)
    {
        this.id = id;
    }
    public int getX()
    {
        return x;
    }
    public void setX(int x)
    {
        this.x = x;
    }
    public int getY()
    {
        return y;
    }
    public void setY(int y)
    {
        this.y = y;
    }
    public Integer getZ()
    {
        return z;
    }
    public void setZ(Integer z)
    {
        this.z = z;
    }
    public int getZlevel()
    {
        return zLevel;
    }
    public void setZlevel(int level)
    {
        zLevel = level;
    }
    public Set<NomLink> getLinks()
    {
        return links;
    }
    public void setLinks(Set<NomLink> links)
    {
        this.links = links;
    }
    @Override
    public int hashCode()
    {
        final int prime = 31;
        int result = 1;
        result = prime * result + (int) (id ^ (id >>> 32));
        return result;
    }
    
    /**
     * Two NomJunctions are equal if they have the same id.
     * 
     * TODO: The equals() method generated by Eclipse produces wrong results,
     * since the junctions returned by NomLink.getJunctions() may be proxy
     * objects from the CGI bytecode enhancer. Is this ok, or the result of
     * a misconfiguration of Hibernate?
     */
    @Override
    public boolean equals(Object obj)
    {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (! (obj instanceof NomJunction))
            return false;
        final NomJunction other = (NomJunction) obj;
        if (getId() != other.getId())
            return false;
        return true;
    }
    
    @Override
    public String toString()
    {
        return String.format("[id=%d, x=%d, y=%d]", id, x, y);
    }
}
